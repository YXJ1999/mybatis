<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yang.mybatis.dao.DepartmentMapper">
    <select id="getDeptById" resultType="com.yang.mybatis.bean.Department">
            select id ,dept_name departmentName from tbl_dept where id=#{id}
    </select>
    <resultMap id="MyDept" type="com.yang.mybatis.bean.Department">
        <id column="did" property="id"/>
        <result column="dept_name" property="departmentName"/>
        <!--collection定义关联集合类型的属性的封装规则
            ofType:指定集合里面元素的类型
        -->
        <collection property="employeeList" ofType="com.yang.mybatis.bean.Employee">
                <!--定义集合中元素的封装规则1-->
            <id column="eid" property="id"/>
            <result column="last_name" property="lastName"/>
            <result property="email" column="email"/>
            <result column="gender" property="gender"/>
        </collection>
    </resultMap>
    <select id="getDeptByIdPlus" resultMap="MyDept">
        select d.id did,d.dept_name dept_name,
               e.id eid,e.last_name last_name,e.email email,e.gender gender
               from tbl_dept d left join tbl_employee e on d.id = e.d_id
                where d.id=#{id}
    </select>
    <resultMap id="MyDeptStep" type="com.yang.mybatis.bean.Department" >
        <id column="id" property="id"/>
        <result column="dept_name" property="departmentName"/>
        <!--<collection property="employeeList" select="com.yang.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId" column="id"/>-->
        <collection property="employeeList" select="com.yang.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId" column="{id=id}" fetchType="lazy"/>
    </resultMap>
    <select id="getDeptByIdStep" resultMap="MyDeptStep">
        select id,dept_name from tbl_dept where id=#{id}
    </select>
    <!--扩展：多列的值传递出去
        将多列的值封装map传递;
        column:"{key1=colum1,key2=colum2}"这个key是select映射过去的sql语句中{}中的值colum是你给过去的值
        fetchType="lazy":表示延迟加载：
        -lazy延迟
        -eager立即
    -->
    <!--<discriminator javaType="">
    鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
    封装：Employee:
    -->
    <resultMap id="MyEmpDis" type="com.yang.mybatis.bean.Employee">
        <id column="eid" property="id"/>
        <result column="last_name" property="lastName"/>
        <result property="email" column="email"/>
        <result column="gender" property="gender"/>
        <!--
        column:指定判定的列名
        javaType:列名对应的Java类型
        -->
        <discriminator javaType="string" column="gender">
            <!--resultType指定封装的类型 也可以用resultMap-->
            <case value="0" resultType="com.yang.mybatis.bean.Employee">
                <association property="dept" select="com.yang.mybatis.dao.DepartmentMapper.getDeptById" column="d_id"></association>
            </case>
            <case value="1" resultType="com.yang.mybatis.bean.Employee">
                <id column="eid" property="id"/>
                <result column="last_name" property="lastName"/>
                <result property="email" column="last_name"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>
</mapper>